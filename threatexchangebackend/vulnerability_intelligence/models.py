from asyncio import events
import json
import string
import random
from operator import mod
from pyexpat import model
from re import U
from statistics import mode
from turtle import back

from django.forms import BooleanField
from mixins import UUIDMixin
from django.db import models
from django.contrib.postgres.fields import ArrayField
from django.contrib.postgres.fields import JSONField
from usermgmt.models import User
from .models import CVE, Event, Change, CWE, Alerts, Product, Report, Task, Vendor

def generate_public_link(size=12):
    chars = string.ascii_uppercase + string.digits
    return "".join(random.choice(chars) for _ in range(size))
    
# Create your models here.
class NotificationFilterAlerts(UUIDMixin):
    new_cve = models.BooleanField(default=False)
    cvss_change = models.BooleanField(default=False)
    cpe_change = models.BooleanField(default=False)
    summary_change = models.BooleanField(default=False)
    cwe_change = models.BooleanField(default=False)
    refernce_change = models.BooleanField(default=False)
    cvss_score = models.IntegerField(default=0, blank=True)


class MailNotificationAlerts(UUIDMixin):
    choices = [("yes", "Yes"), ("no", "No")]
    frequency_choice = [("once", "Once"), ("always", "Always")]
    enable = models.CharField(max_length=20, choices=choices, default="No")
    frequency =  models.CharField(max_length=100, choices=frequency_choice, default="Once")

class CustomTag(UUIDMixin):
    tag_name = models.CharField(blank=False, max_length=200, null=True)
    description = models.TextField(blank=True, null=True)
    tag_colour = models.CharField(max_length=10, null=True, blank=True)
    

class UserVendor(UUIDMixin):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    vendor  = models.ForeignKey(Vendor, on_delete=models.CASCADE)


class UserProduct(UUIDMixin):

    user = models.ForeignKey(User, on_delete=models.CASCADE)
    product = models.ForeignKey(Product, on_delete=models.CASCADE)


class AlertEvent(UUIDMixin):

    alerts = models.ForeignKey(Alerts, on_delete=models.CASCADE)
    event = models.ForeignKey(Event, on_delete=models.CASCADE)
    

class Change(UUIDMixin):
    json = JSONField()

    cve = models.ManyToManyField(CVE, default=True)
    task = models.ManyToManyField(Task, default=True)
    events = models.ManyToManyField(Event, default=True)

class CVE(UUIDMixin):

    cve_id = models.CharField(null=True, blank=False, max_length=100)
    json = JSONField()
    vendors = JSONField()
    cwes = JSONField()
    cvss2 = models.FloatField(blank=True, default=True, null=True)
    cvss3 = models.FloatField(blank=True, default=True, null=True)
    summary = models.TextField(blank=True)
    events = models.ManyToManyField(Event, blank=True)
    changes = models.ManyToManyField(Change, default=True)
    alerts = models.ManyToManyField(Alerts, default=True)

class CWE(UUIDMixin):

    cwe_id = models.CharField(null=True, blank=False, max_length=100)
    name = models.TextField(blank=True)
    description = models.TextField(blank=True)

class Event(UUIDMixin):
    EVENT_TYPES = [
    ("new_cve", "New CVE"),
    ("references", "References changed"),
    ("cpes", "CPEs changed"),
    ("cvss", "CVSS changed"),
    ("summary", "Summary changed"),
    ("cwes", "CWEs changed")]
    type = models.CharField(choices=EVENT_TYPES, max_length=100, default="", null=True, blank=True)
    details = JSONField()
    review = models.BooleanField(default=False, null=True, blank=True)

    cve = models.ManyToManyField(CVE, default=True)
    change = models.ManyToManyField(Change, default=True)
    alerts = models.ManyToManyField(Alerts, default=True)

class Meta(UUIDMixin):
    name = models.CharField(null=True, blank=True, default=True, max_length=100)
    value = models.CharField(null=True, blank=True, default=True, max_length=20)

class Alerts(UUIDMixin):

    details = JSONField()
    notify = models.BooleanField(default=False)
    events = models.ManyToManyField(Event, default=True)
    user = models.ManyToManyField(User, default=True)
    cve = models.ManyToManyField(CVE, default=True)
    report = models.ManyToManyField(Report, default=True)

class Product(UUIDMixin):
    name = models.CharField(null=True, default=True, max_length=100, blank=True)
    vendor = models.ManyToManyField(Vendor, default=True)
    user = models.ManyToManyField(User, default=True)

class Report(UUIDMixin):
    public_link = models.CharField(max_length=20, default=generate_public_link)
    seen = models.BooleanField(default=False)
    details = JSONField()
    user = models.ManyToManyField(User, default=True)
    alerts = models.ManyToManyField(Alerts, default=True)

class UserTag(UUIDMixin):
    name = models.CharField(null=False, blank=False, max_length=100)
    description = models.TextField(blank=True)
    user = models.ManyToManyField(User, default=True)

class CveTag(UUIDMixin):
    user = models.ManyToManyField(User, default=True)
    cve_id = models.ForeignKey(CVE, on_delete=models.CASCADE)

class Task(UUIDMixin):
    changes = models.ManyToManyField(Change, default=True)

class Vendor(UUIDMixin):
    name = models.CharField(unique=True, null=False, max_length=100)
    product = models.ManyToManyField(Product, default=True)
    user = models.ManyToManyField(User, default=True)
